/*****************************************************************************
 *
 * Copyright (C) 2020-2023 Advanced Micro Devices, Inc. All rights reserved.
 *
 *****************************************************************************/
External (PCI0, DeviceObj)
External (POSS, FieldUnitObj)
External (POSC, FieldUnitObj)

Scope (PCI0) {
  Device (AL2A) {
    Name (_HID, EISAID ("PNP0C02"))
    Name (_UID, "AL2AHB")
    Name (_CRS, ResourceTemplate () {
      Memory32Fixed (ReadOnly, 0xFEDC0000, 0x00001000)
    })
    OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x4)
    Field(LUIE, AnyAcc, NoLock, Preserve) {
      IER0, 1,  // IO_Enable_Range_0
      IER1, 1,  // IO_Enable_Range_1
      IER2, 1,  // IO_Enable_Range_2
      IER3, 1,  // IO_Enable_Range_3
      LUR1, 4,  // Reserved
      WUR0, 2,  // Which_UART_RANGE_0
      WUR1, 2,  // Which_UART_RANGE_0
      WUR2, 2,  // Which_UART_RANGE_0
      WUR3, 2,  // Which_UART_RANGE_0
      LUR2, 16, // Reserved
    }
    // Return _STA Disable value if Legacy Resources Enabled
    // Otherwise return _STA Enabled valude (0xF)
    // ARG0 = UART number 0-3
    Method (USTA, 1) {
      If (LAnd (LEqual(IER0, One), LEqual (WUR0, Arg0))) {
        Return (Zero)
      }
      ElseIf (LAnd (LEqual(IER1, One), LEqual (WUR1, Arg0))) {
        Return (Zero)
      }
      ElseIf (LAnd (LEqual(IER2, One), LEqual (WUR2, Arg0))) {
        Return (Zero)
      }
      ElseIf (LAnd (LEqual(IER3, One), LEqual (WUR3, Arg0))) {
        Return (Zero)
      }
      Else {
        Return (0xF)
      }
    }

    // Return _STA Enable value (0xF) if COMx address is being decoded
    // Else return _STA Disable value (0x0)
    // ARG0 = COM port number 1-4
    Method (CSTA, 1) {
      If (LAnd (LEqual (Arg0, 1), LEqual (IER3, 1))) {
        Return (0xF)
      }
      ElseIf (LAnd (LEqual (Arg0, 2), LEqual (IER1, 1))) {
        Return (0xF)
      }
      ElseIf (LAnd (LEqual (Arg0, 3), LEqual (IER2, 1))) {
        Return (0xF)
      }
      ElseIf (LAnd (LEqual (Arg0, 4), LEqual (IER0, 1))) {
        Return (0xF)
      }
      Else {
        Return (Zero)
      }
    }
  }
  Device (URT0) {
    Name (_HID, "AMDI0020")
    Name (_UID, Zero)
    Method (_STA) {
      Store (^^AL2A.USTA (_UID), Local0)
      Return (Local0)
    }
    Name (_CRS, ResourceTemplate () {
      Memory32Fixed (ReadWrite, 0xFEDC9000, 0x1000)
      Memory32Fixed (ReadWrite, 0xFEDC7000, 0x1000)
      IRQ (Edge, ActiveLow, Shared) {FixedPcdGet8(PcdFchUart0Irq)}
    })
  }

  Device (URT1) {
    Name (_HID, "AMDI0020")
    Name (_UID, One)
    Method (_STA) {
      Store (^^AL2A.USTA (_UID), Local0)
      Return (Local0)
    }
    Name (_CRS, ResourceTemplate () {
      Memory32Fixed (ReadWrite, 0xFEDCA000, 0x1000)
      Memory32Fixed (ReadWrite, 0xFEDC8000, 0x1000)
      IRQ (Edge, ActiveLow, Shared) {FixedPcdGet8(PcdFchUart1Irq)}
    })
  }

  // UART 2 always disabled
  Device (URT2) {
    Name (_HID, "AMDI0020")
    Name (_UID, 0x2)
    Name (_STA, Zero)
    Name (_CRS, ResourceTemplate () {
      Memory32Fixed (ReadWrite, 0xFEDCE000, 0x1000)
      Memory32Fixed (ReadWrite, 0xFEDCC000, 0x1000)
      IRQ (Edge, ActiveLow, Shared) {FixedPcdGet8(PcdFchUart2Irq)}
    })
  }

  // UART 3 always disabled
  Device (URT3) {
    Name (_HID, "AMDI0020")
    Name (_UID, 0x3)
    Name (_STA, Zero)
    Name (_CRS, ResourceTemplate () {
      Memory32Fixed (ReadWrite, 0xFEDCF000, 0x1000)
      Memory32Fixed (ReadWrite, 0xFEDCD000, 0x1000)
      IRQ (Edge, ActiveLow, Shared) {FixedPcdGet8(PcdFchUart3Irq)}
    })
  }

  Device (LPC0) {
    Name (_ADR, 0x140003)

    // UARTx -> COM1: I/O port 0x3F8, IRQ 4
    Device (COM1) {
      Name (_HID, EISAID ("PNP0501"))
      Name (_DDN, "COM1")
      Name (_UID, One)
      Method (_STA) {
        Store (^^^AL2A.CSTA (_UID), Local0)
        Return (Local0)
      }
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x03F8, 0x03F8, 0x01, 0x08)
        IRQ (Edge, ActiveLow, Shared) {4}
        UARTSerialBusV2 (115200,              // InitialBaudRate
                         DataBitsEight,       // BitsPerByte
                         StopBitsOne,         // StopBits
                         0x00,                // LinesInUse
                         ,                    // IsBigEndian
                         ParityTypeNone,      // Parity
                         FlowControlNone,     // FlowControl
                         1,                   // ReceiveBufferSize
                         1,                   // TransimitBufferSize
                         "COM1",              // ResourceSource
                         ,                    // ResourceSourceIndex
                         ,                    // ResourceUsage
                         ,                    // DescrpitorName
                         ,                    // Shared
                                              // VendorData
                         )
      })
    }

    // UARTx -> COM2: I/O port 0x2F8, IRQ 3
    Device (COM2) {
      Name (_HID, EISAID ("PNP0501"))
      Name (_DDN, "COM2")
      Name (_UID, 2)
      Method (_STA) {
        Store (^^^AL2A.CSTA (_UID), Local0)
        Return (Local0)
      }
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x02F8, 0x02F8, 0x01, 0x08)
        IRQ (Edge, ActiveLow, Shared) {3}
        UARTSerialBusV2 (115200,              // InitialBaudRate
                         DataBitsEight,       // BitsPerByte
                         StopBitsOne,         // StopBits
                         0x00,                // LinesInUse
                         ,                    // IsBigEndian
                         ParityTypeNone,      // Parity
                         FlowControlNone,     // FlowControl
                         1,                   // ReceiveBufferSize
                         1,                   // TransimitBufferSize
                         "COM2",              // ResourceSource
                         ,                    // ResourceSourceIndex
                         ,                    // ResourceUsage
                         ,                    // DescrpitorName
                         ,                    // Shared
                                              // VendorData
                         )
      })
    }

    // UARTx -> COM3: I/O port 0x3E8, IRQ 4
    Device (COM3) {
      Name (_HID, EISAID ("PNP0501"))
      Name (_DDN, "COM3")
      Name (_UID, 3)
      Method (_STA) {
        Store (^^^AL2A.CSTA (_UID), Local0)
        Return (Local0)
      }
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x03E8, 0x03E8, 0x01, 0x08)
        IRQ (Edge, ActiveLow, Shared) {4}
        UARTSerialBusV2 (115200,              // InitialBaudRate
                         DataBitsEight,       // BitsPerByte
                         StopBitsOne,         // StopBits
                         0x00,                // LinesInUse
                         ,                    // IsBigEndian
                         ParityTypeNone,      // Parity
                         FlowControlNone,     // FlowControl
                         1,                   // ReceiveBufferSize
                         1,                   // TransimitBufferSize
                         "COM3",              // ResourceSource
                         ,                    // ResourceSourceIndex
                         ,                    // ResourceUsage
                         ,                    // DescrpitorName
                         ,                    // Shared
                                              // VendorData
                         )
      })
    }

    // UARTx -> COM4: I/O port 0x2E8, IRQ 3
    Device (COM4) {
      Name (_HID, EISAID ("PNP0501"))
      Name (_DDN, "COM4")
      Name (_UID, 4)
      Method (_STA) {
        Store (^^^AL2A.CSTA (_UID), Local0)
        Return (Local0)
      }
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x02E8, 0x02E8, 0x01, 0x08)
        IRQ (Edge, ActiveLow, Shared) {3}
        UARTSerialBusV2 (115200,              // InitialBaudRate
                         DataBitsEight,       // BitsPerByte
                         StopBitsOne,         // StopBits
                         0x00,                // LinesInUse
                         ,                    // IsBigEndian
                         ParityTypeNone,      // Parity
                         FlowControlNone,     // FlowControl
                         1,                   // ReceiveBufferSize
                         1,                   // TransimitBufferSize
                         "COM4",              // ResourceSource
                         ,                    // ResourceSourceIndex
                         ,                    // ResourceUsage
                         ,                    // DescrpitorName
                         ,                    // Shared
                                              // VendorData
                         )
      })
    }

    Device (DMAC) {
      Name (_HID, EISAID ("PNP0200"))
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x0, 0x0, 0x1, 0x10)
        IO (Decode16, 0x81, 0x81, 0x1, 0xF)
        IO (Decode16, 0xC0, 0xC0, 0x1, 0x20)
        DMA (Compatibility, NotBusMaster, Transfer8_16) {4}
      })
    } // Device (DMAC)

    Device (RTC) {
      Name (_HID, EISAID ("PNP0B00"))
      Name (_FIX, Package () {EISAID ("PNP0B00")})
      Name (_CRS, ResourceTemplate () {
        IO (Decode16,0x70,0x70,0x01,0x02)
        IO (Decode16,0x72,0x72,0x01,0x02)
      })
    } // Device (RTC)

    Device (SPKR) {
      Name (_HID, EISAID ("PNP0800"))
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x61, 0x61, 0x1, 0x1)
      })
    } // Device (SPKR)

    Device (TMR) {
      Name (_HID, EISAID ("PNP0100"))
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x40, 0x40, 0x1, 0x4)
      })
    } // Device (TMR)

    Device (SYSR) {
      Name (_HID, EISAID ("PNP0C02"))
      Name (_UID, 1)
      Name (_CRS, ResourceTemplate () {
        IO (Decode16, 0x10, 0x10, 0x1, 0x10)
        IO (Decode16, 0x20, 0x20, 0x1, 0x2)
        IO (Decode16, 0xA0, 0xA0, 0x1, 0x2)
        IO (Decode16, 0x72, 0x72, 0x1, 0x2)
        IO (Decode16, 0x80, 0x80, 0x1, 0x1)
        IO (Decode16, 0xB0, 0xB0, 0x1, 0x2)
        IO (Decode16, 0x92, 0x92, 0x1, 0x1)
        IO (Decode16, 0xF0, 0xF0, 0x1, 0x1)
        IO (Decode16, 0x400, 0x400, 0x01,0xd0)
        IO (Decode16, 0x4D0, 0x4D0, 0x1, 0x2)
        IO (Decode16, 0x4D6, 0x4D6, 0x1, 0x1)
        IO (Decode16, 0xC00, 0xC00, 0x1, 0x2)
        IO (Decode16, 0xC14, 0xC14, 0x1, 0x1)
        IO (Decode16, 0xC50, 0xC50, 0x1, 0x3)
        IO (Decode16, 0xC6C, 0xC6C, 0x1, 0x1)
        IO (Decode16, 0xC6F, 0xC6F, 0x1, 0x1)
        IO (Decode16, 0xCD0, 0xCD0, 0x1, 0xc)
      })
    } // Device (SYSR)

    Device (SPIR) {   // SPI ROM
      Name (_HID, EISAID ("PNP0C01"))
      Name (_CRS, ResourceTemplate () {
        Memory32Fixed (ReadOnly,
                       FixedPcdGet32 (PcdFlashAreaBaseAddress),
                       FixedPcdGet32 (PcdFlashAreaSize)
                       )
      })
    } // Device (SPIR)

#if FixedPcdGet8 (PcdIpmiInterfaceType) != 0
    Device (IPMK) {   // IPMI KCS Device
      Name (_HID, EisaId ("IPI0001"))       // _HID: Hardware ID
      Name (_STR, Unicode ("IPMI_KCS"))     // _STR: Description String
      Name (_UID, Zero)                     // _UID: Unique ID
      Name (_IFT, One)                      // _IFT: IPMI Interface Type
      Name (_CRS, ResourceTemplate () {     // _CRS: Current Resource Settings
        IO (Decode16,
            FixedPcdGet16 (PcdIpmiKCSPort), // Range Minimum
            FixedPcdGet16 (PcdIpmiKCSPort), // Range Maximum
            0x00,                           // Alignment
            0x01,                           // Length
            )
      })
      Method (_SRV, 0, NotSerialized) {     // _SRV: IPMI Spec Revision
        Return (0x0200)
      }
      Method (_STA, 0, NotSerialized) {     // _STA: Status
        If (FixedPcdGet8 (PcdIpmiInterfaceType) == _IFT) {
          Return (0x0F)
        }
        Else {
          Return (Zero)
        }
      } // Method (_STA)
    } // Device (IPMK)
#endif

  } // Device (LPC0)
} // Device (PCI0)

Method (OSCI, 4, NotSerialized)
{
  Name (SUPP, 0)
  Name (CTRL, 0)

  CreateDWordField (Arg3, 0, CDW1)

  // Check for proper UUID
  If (LEqual (Arg0, ToUUID ("33DB4D5B-1FF7-401C-9657-7441C03DD766")))
  {
    // Create DWord-adressable fields from the Capabilities Buffer
    CreateDWordField (Arg3, 4, CDW2)
    CreateDWordField (Arg3, 8, CDW3)

    // Save Capabilities DWord2 & 3
    Store (CDW2, SUPP)
    Store (CDW3 ,CTRL)

    // Only allow native hot plug control if OS supports:
    // \* ASPM
    // \* Clock PM
    // \* MSI/MSI-X
    If (LNotEqual (And (SUPP, 0x16), 0x16))
    {
      And (CTRL, 0x1E, CTRL) // Mask bit 0 (and undefined bits)
    }

    If (LNotEqual (Arg1, One))
    {
      // Unknown revision
      Or (CDW1, 0x08, CDW1)
    }
    // Update CTRL (DWORD 3) from Platform RASD
    And (CTRL, POSC, CTRL)
    If (LNotEqual (CDW3, CTRL))
    {
      // Capabilities bits were masked
      Or (CDW1, 0x10, CDW1)
    }
    // Update DWORD3 in the buffer
    Store (CTRL, CDW3)
    // Update to RASD oreration region.
    Store (SUPP, POSS) //Store SUPP (DWORD 2) to Platform RASD
    Return (Arg3)
  } Else {
    Or (CDW1, 4, CDW1) // Unrecognized UUID
    Return (Arg3)
  }
}

Method (OSCX, 4, NotSerialized)
{
  Name (SUPP, 0)                  // Support Field
  Name (CTRL, 0)                  // Control Field
  Name (SUPC, 0)                  // CXL Support Field
  Name (CTRC, 0)                  // CXL Control Field

  CreateDWordField (Arg3, 0, CDW1)

  // Check for proper UUID
  If (LEqual (Arg0, ToUUID ("68F2D50B-C469-4D8A-BD3D-941A103FD3FC")))
  {
    // Create DWord-adressable fields from the Capabilities Buffer
    CreateDWordField (Arg3, 4, CDW2)
    CreateDWordField (Arg3, 8, CDW3)
    CreateDWordField (Arg3, 12, CDW4)
    CreateDWordField (Arg3, 16, CDW5)

    // Save Capabilities DWord2, 3, 4 & 5
    Store (CDW2, SUPP)
    Store (CDW3 ,CTRL)
    Store (CDW4, SUPC)
    Store (CDW5 ,CTRC)
    // Only allow native hot plug control if OS supports:
    // \* ASPM
    // \* Clock PM
    // \* MSI/MSI-X
    If (LNotEqual (And (SUPP, 0x16), 0x16))
    {
      And (CTRL, 0x1E, CTRL) // Mask bit 0 (and undefined bits)
    }

    If (LNotEqual (Arg1, One))
    {
      // Unknown revision
      Or (CDW1, 0x08, CDW1)
    }
    // Update CTRL (DWORD 3) from Platform RASD
    And (CTRL, POSC, CTRL)
    If (LNotEqual (CDW3, CTRL))
    {
      // Capabilities bits were masked
      Or (CDW1, 0x10, CDW1)
    }
    // Update DWORD3 in the buffer
    Store (CTRL, CDW3)
    // Update to RASD oreration region.
    Store (SUPP, POSS) //Store SUPP (DWORD 2) to Platform RASD

    If (LEqual (And (CTRC, 0x01), 0x01))
    {
      //
      // The firmware sets this bit to 1 to grant control over CXL Memory
      // Expander Error Reporting.
      //
      And (CTRC, 0xFF, CTRC)
    }
    // Update DWORD5 in the buffer
    Store (CTRC, CDW5)
    Return (Arg3)
  } Else {
    Or (CDW1, 4, CDW1) // Unrecognized UUID
    Return (Arg3)
  }
}
